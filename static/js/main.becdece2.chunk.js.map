{"version":3,"sources":["componnents/yanaISLoveYanaIsLife.jpg","logo.svg","componnents/popup.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","AlertDialogSlide","useState","lgShow","setLgShow","Modal","show","onHide","dialogClassName","aria-labelledby","Body","classname","id","className","Button","onClick","type","download","window","open","samplePDF1","class","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,kD,4ECA3CD,EAAOC,QAAU,IAA0B,kC,+MCY5B,SAASC,IAAoB,IAAD,EACbC,oBAAS,GADI,gCAEbA,oBAAS,IAFI,mBAElCC,EAFkC,KAE1BC,EAF0B,KAGzC,OACE,oCAEE,kBAACC,EAAA,EAAD,CAEEC,KAAMH,EACNI,OAAQ,kBAAMH,GAAU,IACxBI,gBAAgB,YAChBC,kBAAgB,sCAEhB,kBAACJ,EAAA,EAAMK,KAAP,KACA,yBAAKC,UAAY,SAAjB,gBACE,yBAAKC,GAAK,WACT,uBAAGC,UAAY,YAAf,2DAIA,yBAAKA,UAAY,WACjB,kBAACC,EAAA,EAAD,CAAQC,QAAY,WAAOX,GAAU,KAArC,UAEA,4BAAQY,KAAK,SAASD,QAAW,WA1B1CE,IAAS,6BACTC,OAAOC,KAAKC,IAAY,WAyBgCC,MAAM,gBAArD,iB,MCZIC,MAlBf,WACE,OACE,yBAAMT,UAAY,aAChB,yBAAKA,UAAY,YAAjB,WACA,yBAAKA,UAAW,OACd,yBAAKA,UAAW,YACd,uBAAGD,GAAK,WAAR,gBACA,yBAAKA,GAAK,UAAV,gBACa,sDADb,kCAGA,uBAAGA,GAAK,SAAR,8FAGN,kBAACX,EAAD,QCNgBsB,QACW,cAA7BL,OAAOM,SAASC,UAEe,UAA7BP,OAAOM,SAASC,UAEhBP,OAAOM,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.becdece2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/yanaISLoveYanaIsLife.ab684158.jpg\";","module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { Component, useState, useEffect } from \"react\";import Modal from 'react-bootstrap/Modal'\r\nimport Button from 'react-bootstrap/Button'\r\nimport \"./popup.css\"\r\nimport { saveAs } from 'file-saver';\r\n import download from \"downloadjs\" \r\nimport samplePDF1 from \"./yanaISLoveYanaIsLife.jpg\";\r\n\r\nlet dn = function ()\r\n{\r\n  download(\"/yanaISLoveYanaIsLife.jpg\")\r\n  window.open(samplePDF1, '_blank')\r\n}\r\nexport default function AlertDialogSlide() {\r\n  const [smShow, setSmShow] = useState(false);\r\n  const [lgShow, setLgShow] = useState(true);\r\n  return (\r\n    <>\r\n      {/* <Button onClick={() => setLgShow(true)}>Large modal</Button> */}\r\n      <Modal\r\n        //size=\"sm\"\r\n        show={lgShow}\r\n        onHide={() => setLgShow(false)} \r\n        dialogClassName=\"modal-90w\"\r\n        aria-labelledby=\"example-custom-modal-styling-title\"\r\n      >\r\n        <Modal.Body>\r\n        <div classname = \"heder\"> Open zoom ?</div>\r\n          <div id = \"zoombox\" > \r\n           <p className = \"zoombody\">    { `https://zoom.eu whats to open this application.` }\r\n           \r\n           </p>\r\n           </div>\r\n           <div className = \"Buttons\">\r\n           <Button onClick = { () => {setLgShow(false)}} >cancel</Button>\r\n          \r\n           <button type=\"button\" onClick = {()=>{ dn()} } class=\"btn btn-link\">\r\n            open zoom\r\n            </button>\r\n           </div>\r\n        </Modal.Body>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport AlertDialogSlide from \"./componnents/popup\"\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nfunction App() {\r\n  return (\r\n    <div  className = \"container\" > \r\n      <div className = \"zoomlogo\">  zoom </div>\r\n      <div className= \"box\">\r\n        <div className =\"iner_box\">\r\n          <p id  =\"loading\"  >Launching...</p>\r\n          <div id = \"manege\">\r\n          Please click <strong>Open Zoom Meetings</strong> if you see the system dialog.\r\n      </div>\r\n          <p id = \"links\"> nothing prompts from browser, click here to launch the meeting, or download & run Zoom.</p>\r\n        </div>\r\n      </div>\r\n    <AlertDialogSlide />       \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}